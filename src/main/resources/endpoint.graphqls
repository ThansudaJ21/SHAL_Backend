schema {
    mutation: Mutation
    query: Query
}
type Query {
    getRegisterShop(id: Int): ShopQuery
    shopQueryFilter(queryText: ShopQueryFilter, pageNo:Int, pageSize:Int): PageShop
    getFailureReason: [FailureReasonDto]
    getAddressFromPostCode(postCode: String): PostCodeProvinceDto
    #    Product
    getCategory(id: Int): CategoryDto
    getAllCategory: [Category]
    getProduct(id: Int):ProductDto
    productFilter(productFilter: InputProductFilter, pageNo:Int, pageSize:Int): PageProduct
    getAllProduct(shopId: Int): [QueryProductDto]
    findByUserId(userId: String) : UserQuery

    getProductOrderByProductId(productId: Int) :[Order]
    getProductOrderByShopId(shopId: Int) :[Order]

    getProductAuctionType(shopId: Int ):[QueryProductDto]
    getAuctionByProductId(productId: Int) :[AuctionQueryDto]
    getAuctionByShopId(shopId: Int) : [AuctionQueryDto]
}


type Mutation {
    registerShop( userId: Int,shop: ShopInput): Shop
    updateShopStatus(shopStatus: ShopStatusInput , userId: Int): Shop
    shopFailureReason(shopId: Int, failure:[InputFailureReason]):[FailureReason]

    #    Save Product
    saveProduct(shopId: Int,product: InputProduct): Product
    #    Update Product
    updateProductStatus(productStatus: ProductStatusInput): UpdateProductStatus
    updateProduct(product: InputUpdateProduct): UpdateProduct
    #   Delete
    deleteVariations(product:Int,id:Int): Int

    registerUser(user: User): UserDto

    buyProduct(orderInput: OrderInput): SaveOrder
    addToCart(orderInput: OrderInput): SaveOrder
    auction(auction: inputAuction): AuctionDto
}


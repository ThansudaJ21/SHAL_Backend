schema {
    mutation: Mutation
    query: Query
}
type Query {
    getRegisterShop(id: Int): ShopQuery
    getAllShop: [ShopQuery]
    shopQueryFilterByShopName(shopName: ShopQueryFilterByShopName, pageNo:Int, pageSize:Int): PageShop
    ShopQueryFilterByShopStatus(shopStatus: ShopQueryFilterByShopStatus, pageNo:Int, pageSize:Int): PageShop

    #    Product
    getCategory(id: Int): CategoryDto
    getAllCategory: [Category]
    getProduct(id: Int):ProductDto
    getAllProduct(shopId: Int): [QueryProductDto]
    getSaleInformation(productId:Int, id:Int): SalesInformationDto
    getShipment(productId:Int, id:Int): ShipmentListDto
    getAttribute(productId:Int): [ProductAttributeQuery]
    getVariations(productId: Int): [VariationsDto]
    productFilterByCategory(category: String): [FilterProductDto]
    productFilterByStatus(status: String): [FilterProductDto]
}
type Mutation {
    registerShop(shop: ShopInput): Shop
    updateShopStatus(shopStatus: ShopStatusInput): Shop

    #    Save Product
    saveProduct(shopId: Int,product: InputProduct): Product
    saveSaleInformation(productId: Int, saleInformation: InputSalesInformation) :SalesInformation
    saveVariations(productId: Int, variations: [InputVariations]): [Variations]
    saveAttribute(productId: Int,attribute: [InputProductAttributes] ):[ProductAttributeDto]
    saveShipment(productId: Int, shipment: InputShipmentList): ShipmentList

    #    Update Product
    updateProductStatus(productStatus: ProductStatusInput): UpdateProductStatus
    updateProduct(product: InputUpdateProduct): UpdateProduct
    updateSaleInformation(saleInformation: InputUpdateSalesInformation) :UpdateSalesInformation
    updateVariations(productId: Int,variations: [InputUpdateVariations]): [UpdateVariations]
    updateShipments(shipment: InputUpdateShipmentList): UpdateShipmentList
    updateAttribute(productId: Int,attribute: [InputUpdateProductAttributes]): [UpdateProductAttributeDto]

#   Delete
    deleteVariations(id:Int): Int
}

